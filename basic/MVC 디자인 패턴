1. MVC란 (모델 - 뷰 - 컨트롤러)의 약자로, 일반 PC 프로그램 개발에 사용되는 디자인 패턴을 웹 애플리케이션에 도입한 것.


2. MVC 구성 요소와 기능
  View => JSP가 화면 기능을 담당, Model에서 처리한 결과를 화면에 보여준다.
  
  Controller => 클라이언트의 요청을 분석한다, 요청에 따른 필요한 모델을 호출한다.
  
  Model -> 데이터베이스 연동과 같은 비즈니스 로직을 처리한다. 일반적으로 dao, vo 클래스로 구성
  
3. MVC 구성의 동작 방법
  
  1. 브라우저에서 url 요청을 합니다.
  2. controller가 요청을 받아 dao 메서드인 데이터 list를 불러오는 메서드를 호출.
  3. list 메서드에서 sql문으로 회원 정보를 조회한 후 회원 정보를 vo에 설저하여 반환.
  4. controller는 조회한 회원 정보를 jsp다시 포워딩한다.
  5. jsp는 포워딩한 목록을 띄워준다.
  
  
4. 모델2로 답변형 게시판 구현 준비

  답변을 위해서는 부모 글이 목록에 나열되면 각 부모 글에 대해 답변 글이 계층 구조로 나열되어 표시.
  
  일반적인 게시판처럼 부모 글에 대한 답변 글을 계층 구조로 나타내려면 어떻게 해야 할까 
  ->  각 글의 테이블에 추가할 때 해당 글의 부모 글 번호를 같이 등록한 후 글 조회 시 부모 글 번호에 대해 계층형 SQL문을 수행하여 계층
  구조로 표시하는 것.
  
  기본 구조는 다음과 같다.
  JSP -> Controller -> BoardService -> BoardDao
  
  여기서 ??? 왜 서비스를 두는 것일까? DAO는 데이터베이스에 접근하는 기능을 수행하고 Service는 실제 프로그램을 업무에 적용하는 사용자 입장에서
  업무 단위, 즉 트랜잭션으로 작업을 수행합니다. 여기선 '업무 단위'란 사용자 입장에서는 하나의 논리적인 기능을 의미한다. 
 
  예를 들어보자, 기능1을 수행할때는 DAO와 연동하여 한 개의 sql문으로 기능을 수행한다. 하지만, 기능2와 기능3은 여러개의 sql문을 사용한다. 
  그래서 결론적으로는 세부 기능을 수행하는 sql문들을 dao에서 구현하고, service 클래스의 단위 기능 메서드에서 dao에 만들어 놓은 sql문들을
  조합해서 기능을 구현하는 방식을 사용한다.
 
