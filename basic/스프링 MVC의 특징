1. 스프링 프레임워크 MVC의 구조
  -> DispatcherServlet : 클라이언트의 요청을 전달받아 해당 요청에 대한 컨트롤러를 선택하여 요청을 전달한다. 또한 전달한 값을 뷰에 반환한다.
        HandlerMapping : 클라이언트가 요청한 URL을 처리할 컨트롤러를 지정.
        Controller : 요청을 처리한 후 그 결과를 DispatcherServlet에 전달.
        ModelAndView : 컨트롤러가 처리한 결과 및 뷰 선택에 필요한 정보를 저장합니다.
        ViewResolver : 컨트롤러의 처리 결과를 전달할 뷰를 지정합니다.
     View : 컨트롤러의 처리 결과 화면을 생성합니다.
     
     
     동작 순서 : 웹 브라우저 -> DispatcherServlet -> HandlerMapping -> Controller -> ModelAndView -> DispatcherServlet -> ViewResolver 
              -> view -> DispatcherServlet -> 웹 브라우저
              
2. SimpleUrlController 이용하여 스프링 MVC 실습

   여기서 서블릿을 사용하지 않고 스프링을 사용하는 이유는
   -> 서블릿은 브라우저 요청 처리시 메서드를 이용하여 요청명을 일일히 가져왔다.
   하지만 스프링은 Controller 기능을 이용하여 요청을 처리한다
   
   참고. 서블릿과 스프링 컨테이너를 정리
    
    Servlet 동작과정
    1. 사용자가 URL을 클리하면 HTTP Request를 Servlet Container에 보낸다.
    2. Servlet Container는 HttpServletRequest, HttpServletResponse 두 객체를 생성한다.
    3. 사용자가 요청한 URL을 분석하여 어느 서블릿에 대한 요청인지 찾는다.
    
    Spring Container의 동작과정
    -> spring container는 bean의 생명주기를 관리한다.
    이 bean을 관리하기 위해 IOC를 사용한다. 컨테이너의 종류는 BeanFactory와 ApplicationContext가 존재.
      
    1. 웹 어플리케이션이 실행되면 WAS에 의해 web.xml이 로딩된다.
    2. web.xml에 등록되어 있는 ContextLoader가 생성
    3. ContextLoader에서 root-context.xml을 생성
    4. root-context.xml에 등록되어 있는 spring container가 구동
    5. 클라이언트로 부터 웹 애플리케이션 요청 발생
    6. DispatcherServlet이 생성 (FrontController)의 역활 수행
    7. 두번째 spring controller가 구동. 응답에 맞는 pageController들이 동작한다. 이때 첫번째 spring container가 구동되면서 dao, impl가 협업을한다.
