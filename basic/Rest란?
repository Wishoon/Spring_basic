1. Rest란? : Representational State Transfer의 약자로, 하나의 URI가 고유한 리소스를 처리한느 공통 방식. 
            예를 들어 /board/112로 요청할 경우 게시글 중 112번째 글을 의미한다.
            
2. @RestController : 스프링 3버전에서는 @ResponseBody를 통해 Rest 방식의 처리를 했다. 하지만 4버전에서는 @RestController를 사용한다.
                     JSP같은 뷰를 반환하는 것이 아니고 JSON, XML 같은 데이터를 브라우저로 전송한다.
                     
3. @ResponseBody 및 @ResponseEntity 사용하기

4. Rest 방식으로 URI 표현하기
  -> 서버에 데이터를 조회하는 것뿐만 아니라 추가, 수정, 삭제 기능도 REST 방식으로 요청해야 한다. 이때 서버에 어떤 행위를 요청할 것인가는
    HTTP 메서드를 이용해 처리한다.
    
    *HTTP 메서드 : POST:추가 / GET:조회 / PUT:수정 / DELETE:삭제
    
  -> 다음은 각 작업을 REST방식으로 요청하는 전형적인 URI의 예다.
    
    /작업명/기본키 + 메서드 + 데이터
    
    1.작업명: 요청하는 작업 종류
    2.기본키: 요청하는 작업에 해당하는 대상의 기본키
    3.메서드: 요청하는 기능
    4.데이터: 기능 수행에 필요한 JSON 데이터
    
      POST   /boards + 데이터  
      GET    /boards/133
      PUT    /boards/133 + 데이터
      DELETE /boards/133
      
      
 5. 그런 REST로 괜찮은가???
 
 -> Rest의 시작은 1991년 web에서 시작되었다. 인터넷을 나와있는데 정보 공유를 어떻게 할 수 있을까?
 
 -> 결론: 모든 정보를 하이퍼텍스트로 연결한다. (표현 형식: HTML, 식별자: URI, 전송 방법: HTTP)
 
 -> 어떻게 하면 web을 망가트지 않고 http를 증본?(호환)을 할 수 있을까??
 
 -> 결론: HTTP Object Model -> 4년후 -> REST라는 이름으로 바뀐다. 
 
 -> API??  XML-RPC라고 원격으로 다른 메서드를 호출하는 프로토콜(SOAP) -> Salesforce API  -> flickr API
 결국 사용량에서 REST API가 승리한다. 그런데?? CMIS라는 것이 나온다.(REST 바인딩 지원)
 
 Microsoft REST API에서는 uri는 https://(serviceRoot}/{collection}/{id} 형식이여야 한다.
 -> but 로이 필딩은 이것은 HTTP API이다라고 말했다.
   또한 블로그에 REST API는 반드시 'hypertext-driven'이여야 한다.

 REST API란? -> 아키텍쳐 스타일을 따르는 API -> 아키텍처 스타일이란 -> 제약조건의 집합
 REST를 구성하는 스타일 : client-server, stateless, cache, uniform interface, layered system, code-on-demand(optional)
 
 Uniform Interface의 제약조건 :  1.identification of resources : 리소스가 URI로 식별된다.
                                2.manipulation of resources through representations : representations롤 통해서 리소스를 조작해야 한다.
                                3.self-descriptive message : 메시지는 스스로를 설명해야한다.
                                ex) 1. 목적지가 있어야 한다.
                                    GET / HTTP/1.1    : 이 요청 메시지는 뭔가 빠져있어서 self-descriptive 하지 못한다.
                                    HOST : www.example.org : 목적지를 추가하면 이제 self-descriptive
                                    2. 컨텐츠 타입을 기록해야한다.
                                    HTTP/1.1 200 OK
                                    Content-Type: application/json-patch_json -> 이단어 즉, json 패치라는 것을 읽게 해줘야 성립이 맞는다.
                                    
                                    [ { "op": "remove", "path": "/a/b/c" } ]
                                    
 HATEOAS : 애플리케이션의 상태는 Hyperlink를 이용해 전이되어야 한다.      
 
 왜 이런걸 하는가?    1. 서버와 클라이언트가 각각 독립적으로 진화한다.
                     2. 서버의 기능이 변경되어도 클라이언트를 업데이트할 필요가 없다.
 
 REST가 웹의 독립적 진화에 도움을 주었나?
 -> HTTP 지속적으로 영향을 줌
    Host 헤더 추가
    길이 제한을 다루는 방법이 명시
    URI에서 리소스의 정의가 추상적으로 변경됨
    기타 HTTP와 URI에 많은 영향을 줌
    
 질문. 요즘 결국 대부분이 REST API라고 불리는 API를 쓰고 있다. 하지만 이 중 대부분이 REST API가 아니다.
 
 왜 웹과는 달리 API에서는 REST가 잘 안될까 생각해보자.
 
 비교.                    흔한 웹 페이지    HTTP API
              Protocol        HTTP          HTTP
             커뮤니케이션    사람-기계      기계-기계
             Media Type       HTML          JSON 
             
                              HTML          JSON
             Hyperlink         됨      정의되어있지 않음      
           Self-descriptive    됨           불안전
                     
 결국 위 2가지 문제로 인하여 REST API는 성립되지 않는다.
 
 그럼 REST API로 바꿔보자.
 방법.1 : Media type을 등록
 방법.2 : Profile 
          1. "id"가 뭐고 "title"이 뭔지 의미를 정의한 명세를 작성한다.   
          2. Link 헤더에 profile relation으로 해당 명세를 링크한다.
          3. 이제 메시지를 보는 사람은 명세를 찾아갈 수 있으므로 이 문서의 의미를 온전히 해석할 수 있다.
   
 방법.1 : data에 다양한 방법으로 하이퍼링크를 표현한다.
 방법.2 : HTTP 헤더로 link, location을 표현
 
